# 基本语法是通过 {} 和 : 来代替以前的 %

# 传递参数，把后面的代替{}，和函数传参是一样的



#-------------------------------------------------------------------
#字符串的格式化
'''

^, <, > 分别是居中、左对齐、右对齐，后面带宽度，
: 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。
+ 表示在正数前显示 +，负数前显示 -；
（空格）表示在正数前加空格
b、d、o、x 分别是二进制、十进制、八进制、十六进制。

'''


print('{:.2f}'.format(pi))      #保留小数点后两位数字
print('{:+.2f}'.format(pi))     #带符号保留两位，正数前面显示+
print('{:+.2f}'.format(-pi))    #带符号保留两位，负数前面显示-
print('{:.0f}'.format(pi))      #不带小数
try:
    print('{:0<3d}'.format(pi))
except ValueError:
    print('浮点型需要使用f，整数型要用d')
print('{:0>2d}'.format(5))      #数字补零 (填充左边, 宽度为2)
print('{:x<4d}'.format(5))      #数字补x (填充右边, 宽度为4)
print('{:,}'.format(1000000))   #以逗号分隔的数字格式
print('{:.3e}'.format(1000000)) #指数记法
print('{:.2%}'.format(pi))      #百分号记法
print('{:>10d}'.format(5))     #默认是空格，左对齐
print('{:b}'.format(11))         #转化为二进制
print('{:d}'.format(11))         #十进制
print('{:o}'.format(11))        #八进制
print('{:x}'.format(11))        #十六进制
print('{:#x}'.format(11))
print('{:#X}'.format(11))

'''
3.14
+3.14
-3.14
3
浮点型需要使用f，整数型要用d
05
5xxx
1,000,000
1.000e+06
314.16%
         5
1011
11
13
b
0xb
0XB
'''